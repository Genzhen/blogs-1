1、commonjs Promises/A
  promise模式在任何时刻都处于以下三种状态之一：未完成（unfulfilled）、已完成（resolved）和拒绝（rejected）。
  promise对象上的then方法负责添加针对已完成和拒绝状态下、的处理函数。then(fulfilledHandler, errorHandler, progressHandler)。
  then方法会返回另一个promise对象，以便于形成promise管道，这种返回promise对象的方式能够支持开发人员把异步操作串联起来
  
2、jQuery Deferred的实现
  deferred对象是jQuery的回调函数解决方案。它解决了如何处理耗时操作的问题，对那些操作提供了更好的控制，以及统一的编程接口。
  (1). ajax操作的链式写法， 返回的是deferred对象，1.5版本之前返回的是XHR；
  (2). 同一个ajax请求，多个回调函数, 异步完成之后再添加回调会立即执行；
  (3). 多个异步操作可以使用同一个回调
  
3、jQuery Deferred.promise作用
  避免出现随意改变deferred状态的情况出现，jQuery提供了deferred.promise()方法。它的作用是，在原来的deferred对象上返回另一个
  deferred对象，后者只开放与改变执行状态无关的方法（比如done()方法和fail()方法），屏蔽与改变执行状态有关的方法（比如
  resolve()方法和reject()方法），从而使得执行状态不能被改变。
    （1） $.Deferred() 生成一个deferred对象。
　　（2） deferred.done() 指定操作成功时的回调函数
　　（3） deferred.fail() 指定操作失败时的回调函数
　　（4） deferred.promise() 没有参数时，返回一个新的deferred对象，该对象的运行状态无法被改变；接受参数时，作用为在参数
　　      对象上部署deferred接口。
　　（5） deferred.resolve() 手动改变deferred对象的运行状态为"已完成"，从而立即触发done()方法。
　　（6）deferred.reject() 这个方法与deferred.resolve()正好相反，调用后将deferred对象的运行状态变为"已失败"，从而立即触发
　　      fail()方法。
　　（7） $.when()为多个操作指定回调函数。除了这些方法以外，deferred对象还有二个重要方法，上面的教程中没有涉及到。
　　（8）deferred.then()有时为了省事，可以把done()和fail()合在一起写，这就是then()方法。
　　    $.when($.ajax( "/main.php" )).then(successFunc, failureFunc );
        如果then()有两个参数，那么第一个参数是done()方法的回调函数，第二个参数是fail()方法的回调方法。如果then()只有
        一个参数，那么等同于done()。
　　（9）deferred.always()用来指定回调函数的，不管调用的是deferred.resolve()还是deferred.reject()，最后总是执行。
　　    $.ajax( "test.html" ).always( function() { alert("已执行！");} );

4、Deferred.then方法
  jQuery中的Deferred，1.8版本之前，返回原有的deferred对象，外部也可以修改其状态；1.8版本之后，返回deferred.promise，
  也就是deferred的
