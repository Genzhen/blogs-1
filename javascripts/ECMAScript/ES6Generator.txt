1、Generator函数
  Generator函数是ES6提供的一种异步编程解决方案，语法行为与传统函数完全不同。
  可以把它理解成一个函数的内部状态的遍历器（也就是说，Generator函数是一个状态机）。它每调用一次，就进入下一个内部状态。
  Generator函数可以控制内部状态的变化，依次遍历这些状态。
  
  Generator函数的特质：
  一、function命令与函数名之间有一个星号；
  二、函数体内部使用yield语句，定义遍历器的每个成员，即不同的内部状态（yield语句在英语里的意思就是“产出”）。
  
  Generator函数的调用方法与普通函数一样，func()。不同的是，调用Generator函数后，返回的也不是函数运行结果，而是一个指向内部状态的   指针对象，也就是遍历器对象（Iterator Object）。
  必须调用遍历器对象的next方法，使得指针移向下一个状态。每次调用next方法，内部指针就从函数头部或上一次的地方开始执行，直到遇到下   一个yield语句（或return语句）为止。
  Generator函数是分段执行的，yield命令是暂停执行的标记，而next方法可以恢复执行。
  
  调用Generator函数，返回一个部署了Iterator接口的遍历器对象，用来操作内部指针。以后，每次调用遍历器对象的next方法，就会返回
  一个有着value和done两个属性的对象。value属性表示当前的内部状态的值，是yield语句后面那个表达式的值；done属性是一个布尔值，
  表示是否遍历结束。
  
2、yield
  由于Generator函数返回的遍历器，只有调用next方法才会遍历下一个内部状态，所以其实提供了一种可以暂停执行的函数。yield语句就是
  暂停标志。
