1、i++和++i
    ++variable increments the variable, returning the new value.
    variable++ increments the variable, but returns the old value.
    --variable decrements the variable, returning the new value.
    variable-- decrements the variable, but returns the old value.
    var i = 42;
    alert(i++); // shows 42
    alert(i); // shows 43
    i = 42;
    alert(++i); // shows 43
    alert(i); // shows 43


2、变量声明提升（Hoisting）
var myvar = 'my value';  

(function() {  
    alert(myvar); // undefined  
    var myvar = 'local value';  
    alert(myvar); // 'local value'
})(); 
alert(myvar); // 'my value'


3、JavaScript名称解析顺序
按照下面顺序查找：

(1). 当前作用域内是否有 var foo 的定义。
(2). 函数形式参数是否有使用 foo 名称的。
(3). 函数自身是否叫做 foo。
(4). 回溯到上一级作用域，然后从 (1) 重新开始。


4、事件冒泡和事件捕获
事件冒泡和事件捕获刚好相反的两个过程，事件捕获从外到内，也就是从根元素到目标元素，而事件冒泡恰好相反。目前jQuery只支持事件冒泡，
使用事件捕获请写javascript原生代码。
preventDefault阻止默认行为；
stopPropagation停止事件冒泡；
return false两样都是

5、事件中各坐标（X\Y）含义
    IE浏览器中，event.x / event.y，而其他浏览器（chrome，firefox）中用的是event.pageX和event.pageY表示相对于页面的X、Y坐标(包含滚动条长度)；
    clientX/clientY则是相对于浏览器的视窗的坐标位置，screenX/screenY是相对于屏幕的坐标位置。
    pageX/Y gives the coordinates relative to the <html> element in CSS pixels.
    clientX/Y gives the coordinates relative to the viewport in CSS pixels.
    screenX/Y gives the coordinates relative to the screen in device pixels.
    
    下面是鼠标事件的全部坐标属性
    Mouse Event Properties
    clientX, clientY
    Standard: W3C Recommendation
    Mouse position relative to the browser's visible viewport.
    
    screenX, screenY
    Standard: W3C Recommendation
    Mouse position relative to the user's physical screen.
    
    offsetX, offsetY
    Standard: W3C Working Draft
    Mouse position relative to the target element. This is implemented very inconsistently between browsers.
    
    pageX, pageY
    Standard: W3C Working Draft
    Mouse position relative to the html document (ie. layout viewport).
    
    x, y
    Standard: W3C Working Draft
    Equivalent to clientX, clientY, but is unsupported by some browsers. Use clientX, clientY instead.
    
    layerX, layerY
    No Standard
    Mouse position relative to the closest positioned ancestor element. If none of the ancestor elements have positioning, 
    the mouse position is relative to the document (like pageX, pageY). LayerX, layerY have an uncertain future.
    
    QuirksMode has a great compatibility table that details inconsistencies in the non-standard properties.
    Know that only clientX, clientY, screenX, and screenY are part of the W3C Spec.

6、正則匹配比較： exec, test;  字符串匹配：match, search, replace  
    参见：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec
 RegExp:
 (1). test, 一个字符串是否匹配一个正则表达式（RegExp），可使用 RegExp.test(str)。 RegExp.input/RegExp.$_:传入的字符串，这里是静态属性；
 (2). exec, 只是需要第一个匹配结果，你可能想要使用 RegExp.exec(str)。当正则表达式使用 "g" 标志时，可以多次执行exec方法来
 查找同一个字符串中的成功匹配(while方法)。 结果数组resultArr包含index、input;而正则实例regexp包含lastIndex、source、
 ignoreCase、global、multiline（正则模式的字符串）属性。
 
 String: 
 (1). match, 当字符串匹配到正则表达式（regular expression）时，match()方法会提取匹配项。如果正则表达式没有g标志，
 返回和 RegExp.exec(str) 相同的结果，返回[第一个匹配值,[分组匹配值,]input,index];
 (2). search, 执行一个查找，看该字符串对象与一个正则表达式是否匹配。如果匹配成功，则 search() 返回正则表达式在字符串中
 首次匹配项的索引。否则，返回 -1。当你想要知道字符串中是否存在某个模式（pattern）时可使用 search，类似于正则表达式
 的 test 方法。当要了解更多匹配信息时，可使用 match（会更慢），该方法类似于正则表达式的 exec 方法。
 (3). replace, replace() 方法使用一个替换值（replacement）替换掉一个匹配模式（pattern）在原字符串中某些或所有的匹配项，
 并返回替换后的字符串。这个替换模式可以是字符串或者 RegExp，替换值可以是一个字符串或者一个函数。该方法并不改变调用它的字符串本身,而只是返回替换后的字符串.

7、script标签的defer属性和async属性
    参见：http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html
    相同点：
    (1). 加载外部文件不阻塞页面渲染；
    (2). 使用这两个属性不能调用document.write方法；
    (3). 都有脚本的onload事件回调
    不同点：
    (1). h4定义了defer, h5定义了async
    (2). defer并行下载之后，还需DOM解析完成之后才会执行；而async则会在下载之后立即执行

8、Array.prototype的every、map、forEach、some、reduce、reduceRight
every: 方法测试数组的所有元素是否都通过了指定函数, 返回布尔值。callback被调用时传入三个参数：元素值，元素的索引，原数组。
map: 返回一个由原数组中的每个元素调用一个指定方法后的返回值组成的新数组。callback被调用时传入三个参数：同上
forEach： 让数组的每一项都执行一次给定的函数。callback被调用时传入三个参数：同上
some: 测试数组中的某些元素是否通过了指定函数的测试。callback被调用时传入三个参数：同上
reduce: 四个参数：初始值（或者上一次回调函数的返回值），当前元素值，当前索引，调用 reduce 的数组。
    arr.reduce(callback,[initialValue]), initialValue为空，则currentValue等于数组中的第二个值。
    例如：var flattened = [[0, 1], [2, 3], [4, 5]].reduce(function(a, b) {
        return a.concat(b);
    }); //[0, 1, 2, 3, 4, 5]
reduceRight：与 reduce() 的执行方向相反。

9、Object的静态方法：freeze、preventExtensions、seal(密封)
