1、闭包的定义
  函数可以引用定义在其外部作用域的变量，相比创建它们的函数有更长的生命周期。
  闭包其实就是内部存储其外部变量的引用，并能读写这些变量。
  function test1(a1){
    return function(a2){
     return function(a3){
      console.log(a1, a2, a3);
     }
    }
  }
  test1('cycle')('eat')('something');
  
2、变量声明提升
  javascript是函数级作用域，而非块级作用域。实际上，可以将变量声明看成两部分：声明、赋值。
  javascript会隐式地提升声明部分到函数的顶部，而赋值部分保持不动。
  
3、避免滥用eval
  eval函数会将其参数当做javascript程序进行解释，并运行于调用者的局部作用域，也就是赋予了外部调用者能改变函数内部作用域的能力。
  尽量避免使用eval函数污染内部作用域，非用不可，尽量间接调用，再不行封装在即执行函数作用域内。
  
  eval函数具有调用整个作用域的能力，即直接调用eval函数放在局部作用域内求值，而间接调用eval函数放在全局作用域内求值。
  两种间接调用方式：eval赋值给变量；(0,eval)(parameters)
  
  通常情况下，直接调用eval函数性能消耗较大，可能导致其包含的函数以及所有直到最外层的函数运行都相对缓慢。
