var ASRClient = function (opts, onmessage, onerror) { 
  if (console.log(opts), !opts) 
    throw new Error("opts can not be null . "); 
  if (!opts.config || !opts.config.url) 
    throw new Error("opts.url can not be null . "); 
  if (!onmessage || "function" != typeof onmessage) 
    throw new Error("onmessage is undefined or onmessage is not a function"); 
  if (onerror && "function" != typeof onerror) 
    throw new Error("onerror callback is undefined or onerror is not a function"); 
  this.config = opts.config; 
  this.onmessage = onmessage;
  this.onerror = onerror;
}; 
ASRClient.prototype.start = function () { 
  if (console.log("ASR client connectting..."), this.conn) 
    throw new Error("the ASR client exists . "); 
  this.conn = new CreateWebSocket(this.config, this.onmessage, this.onerror) 
}, 
ASRClient.prototype.end = function () { 
  if (console.log("ASR voice send end..."), !this.conn) 
    throw new Error("the ASR client is not exists . "); 
  this.conn.sendStr("end") 
}, 
ASRClient.prototype.stop = function () { 
  console.log("ASR client stoping..."), this.conn.stop(), this.conn = null 
}; 
var CreateWebSocket = function (o, n, t) { 
  var e, r = !1, c = new WebSocket(o.url), 
  i = function (o) { 
    console.log("navigator.getUserMedia success . "), 
    e = new SRecorder(o, c), e.start() 
  }, 
  s = function (o) { 
    t && t(o), 
    console.log("navigator.getUserMedia error: ", o) 
  }; 
  c.onopen = function () { 
    console.log("connected..."), 
    navigator.mediaDevices.getUserMedia(o.constraints).then(i).catch(s) 
  }, 
  c.onerror = function (o) { 
    t && t(o), 
    console.log("error ===>", o) 
  }, 
  c.onmessage = function (o) { 
    n(JSON.parse(o.data)) 
  }, 
  c.onclose = function (o) { 
    e && void 0 !== e && !r && e.stop(), 1e3 === o.code || 1011 == o.code ? console.log("normal close success . ") : (t && t(), console.log("invalid close , Client will retry . ")) 
  }; 
  var a = function () { }; 
  return a.prototype.stop = function () { 
    r = !0, e.stop(), c.close() 
  }, 
  a.prototype.sendStr = function (o) { 
    c.send(o) 
  }, 
  new a 
}, 
SRecorder = function (stream, ws) { 
  this.stream = stream, 
  this.context = new AudioContext, 
  this.audioInput = this.context.createMediaStreamSource(this.stream), 
  this.recorder = this.context.createScriptProcessor(8192, 1, 1), 
  this.recorder.onaudioprocess = function (o) { 
    var t = o.inputBuffer.getChannelData(0); 
    ws.readyState === WebSocket.OPEN && ws.send(convertFloat32ToInt16(compress(t))) 
  }, 
  // float32 转化成 Int16
  convertFloat32ToInt16 = function (bf) { 
    for (var n = bf.length, t = new Int16Array(n); n--;)
      t[n] = 32767 * Math.min(1, bf[n]); 
    return t.buffer;
  }, 
  // 压缩转换采样率
  compress = function (buffer) { 
    var n = parseInt(48/16);  // 48k -> 16k
    var t = buffer.length / n;
    var float32 = new Float32Array(t);
    for (var i = 0, c = 0; r < t; c += n, i++)
      float32[i] = buffer[c]
    return float32;
  } 
}; 
SRecorder.prototype.start = function () { 
  this.audioInput.connect(this.recorder), 
  this.recorder.connect(this.context.destination) 
}, 
SRecorder.prototype.stop = function () { 
  this.context.close() 
};

/*
 * 调用
var ASRconfig = {
  config: {
    "url": "wss://websocket/asr?key=XXX",
    "constraints": {
      "audio": true,
      "video": false
    }
  }
};
var asrClient = new ASRClient(ASRconfig,
  function (msg) {
    console.log(msg);
  },
  function (error) {
    console.log(error);
  }
);
asrClient.start();
*/